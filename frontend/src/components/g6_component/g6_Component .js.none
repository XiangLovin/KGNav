import G6 from '@antv/g6';
const nodes = [];
const edges = [];
const combos = [];
const graph = null;
const width = window.innerWidth - 375;
const height =window.innerHeight - 172;


export default {
  name: "G6Componanet",
  components: {},
  data() {
    return{
      current: ['mail'],
      openKeys: [],
    }
  },
  watch: {
    openKeys(val) {
      console.log('展开列表', val);
      console.log(this.openKeys)
    },
  },
  methods:{
    NodeClick(e) {
      console.log('点击叶节点', e);
      let infoEle = document.getElementById('infomations');
      let listEle = document.getElementById('infolist');
      let meumEle = document.getElementById('meum')
      listEle.innerHTML =`
      这是节点:${e.key}
      `
      meumEle.style.display='none'
      infoEle.style.display='block';
      
    },
    ComboClick(e) {
      console.log('点击Combo', e);
      
    },
    closeInfo(){
      let infoEle = document.getElementById('infomations');
      let meumEle = document.getElementById('meum')
      meumEle.style.display='block'
      infoEle.style.display='none';
    },
    onSearch(value) {
      console.log(value);
    },
    G6Fun(graph){
      function refreshDragedNodePosition(e) {
        const model = e.item.get('model');
        model.fx = e.x;
        model.fy = e.y;
      }
      graph.on('node:dragstart', (e) => {
        const forceLayout = graph.get('layoutController').layoutMethods[0];
        forceLayout.execute();
        refreshDragedNodePosition(e);
      });
      graph.on('node:drag', (e) => {
        refreshDragedNodePosition(e);
      });
      graph.on('node:dragend', (e) => {
        e.item.get('model').fx = null;
        e.item.get('model').fy = null;
      });

      graph.on('node:click', (e) => {
        const item = e.item;
        const model = item.getModel();

       });
      //   curShowNodes = [];
      //   curShowEdges = [];
      //   const item = e.item;
      //   const model = item.getModel();
      //   if (!model.isLeaf && model.level !== 0) {
      //     return;
      //   }
      //   // if clicked a root, hide unrelated items and show the related items
      //   if (model.level === 0) {
      //     const layoutController = graph.get('layoutController');
      //     const forceLayout = layoutController.layoutMethods[0];
      //     forceLayout.forceSimulation.stop();
      //     // light the level 0 nodes
      //     showNodes.forEach((snode) => {
      //       const item = graph.findById(snode.id);
      //       graph.setItemState(item, 'dark', false);
      //       if (snode.x < 0.5 * width) {
      //         snode.x = 300;
      //       } else {
      //         snode.x = width - 300;
      //       }
      //     });
      //     model.x = width / 2;
      //     model.y = height / 2;
      //     // animatively hide the items which are going to disappear
      //     if (curShowEdges.length) {
      //       curShowEdges.forEach((csedge) => {
      //         const item = graph.findById(csedge.id);
      //         item && graph.setItemState(item, 'disappearing', true);
      //       });
      //     }
      //     curShowNodes.forEach((csnode) => {
      //       const item = graph.findById(csnode.id);
      //       item && graph.setItemState(item, 'disappearing', true);
      //     });
      //     graph.positionsAnimate();
      
      //     // reset curShowNodes nad curShowEdges
      //     curShowNodes = [];
      //     curShowEdges = [];
      
      //     // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view
      //     if (currentFocus && currentFocus.id === model.id) {
      //       currentFocus = undefined;
      //       layoutController.layoutCfg.nodeStrength = 2500;
      //       layoutController.layoutCfg.collideStrength = 0.8;
      //       layoutController.layoutCfg.alphaDecay = 0.01;
      //     } else {
      //       // click other focus node, hide the current small nodes and show the related nodes
      //       currentFocus = model;
      //       // change data after the original items disappearing
      //       const layoutController = graph.get('layoutController');
      //       layoutController.layoutCfg.nodeStrength = () => {
      //         return -80;
      //       };
      //       layoutController.layoutCfg.collideStrength = 0.2;
      //       layoutController.layoutCfg.linkDistance = (d) => {
      //         if (d.source.level !== 0) return 120;
      //         const length = 250;
      //         return length;
      //       };
      //       layoutController.layoutCfg.edgeStrength = () => {
      //         return 2;
      //       };
      
      //       const tag = model.tag;
      //       const findTags = [];
      //       curShowNodesMap = new Map();
      //       // find the nodes which are the descendants of clicked model
      //       nodes.forEach((node) => {
      //         if (!node.tags) return;
      //         const tags = node.tags;
      //         const tlength = tags.length;
      //         let isChild = false;
      //         const parents = [];
      //         for (let i = 0; i < tlength; i++) {
      //           const ts = tags[i].split('-');
      //           if (ts[0] === tag) {
      //             isChild = true;
      //           }
      //           parents.push(nodeMap.get(ts[0]));
      //         }
      //         if (isChild) {
      //           const randomAngle = Math.random() * 2 * Math.PI;
      //           node.x = model.x + (Math.cos(randomAngle) * model.size) / 2 + 10;
      //           node.y = model.y + (Math.sin(randomAngle) * model.size) / 2 + 10;
      //           // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);
      
      //           if (!node.style) node.style = {};
      //           node.style.lineWidth = 0;
      //           node.style.opacity = 1;
      //           if (node.isLeaf) {
      //             node.type = 'animate-circle';
      //             let color = 'l(0)';
      //             const parentsNum = parents.length;
      //             parents.forEach((parent, i) => {
      //               const parentColor = parent.color.split(' ')[1].substr(2);
      //               color += ` ${i / (parentsNum - 1)}:${parentColor}`;
      //             });
      //             if (parentsNum === 1) {
      //               color = model.color.split(' ')[1].substr(2);
      //             }
      //             node.color = color;
      //             node.style.fill = color;
      //             node.style.fill = '#fff';
      //             node.style.lineWidth = 1;
      //             node.size = 60;
      //             node.labelCfg = {
      //               style: {
      //                 fontSize: 11,
      //                 lineHeight: 19,
      //                 fill: '#697B8C',
      //               },
      //               position: 'center',
      //             };
      //           } else if (node.level !== 0) {
      //             node.type = 'circle'; // 'bubble';
      //             node.size = 95;
      //             if (!node.style) node.style = {};
      //             node.color = model.color;
      //             node.style.fill = model.color;
      //             node.labelCfg = {
      //               style: {
      //                 fill: '#fff',
      //                 fontSize: 14,
      //               },
      //               position: 'center',
      //             };
      //           }
      //           curShowNodes.push(node);
      //           curShowNodesMap.set(node.id, node);
      
      //           // add the edge connect from model to node which exists in edges
      //           const edgeId = `${model.id}-${node.id}`;
      //           const edge = edgesMap.get(edgeId);
      //           if (edge) {
      //             edge.color = model.color;
      //             curShowEdges.push(edge);
      //           }
      //           tags.forEach((t) => {
      //             const ts = t.split('-');
      //             if (ts[0] !== tag) {
      //               findTags.push(ts[0]);
      //             }
      //             if (ts[1]) {
      //               findTags.push(ts[1]);
      //             }
      //           });
      //         }
      //       });
      
      //       // find the nodes which are the ancestors of the current curShowNodes
      //       nodes.forEach((node) => {
      //         const findTagsLength = findTags.length;
      //         for (let i = 0; i < findTagsLength; i++) {
      //           if (node.tag === findTags[i] && curShowNodesMap.get(node.id) === undefined) {
      //             curShowNodes.push(node);
      //             curShowNodesMap.set(node.id, node);
      //             return;
      //           }
      //         }
      //       });
      
      //       // find the edges whose target end source are in the curShowNodes
      //       curShowNodes.forEach((nu, i) => {
      //         const lu = nu.level;
      //         curShowNodes.forEach((nv, j) => {
      //           if (j <= i) return;
      //           const lv = nv.level;
      //           let edgeId;
      //           if (lu < lv) {
      //             edgeId = `${nu.id}-${nv.id}`;
      //           } else {
      //             edgeId = `${nv.id}-${nu.id}`;
      //           }
      //           let color = model.color;
      //           if (nu.isLeaf) {
      //             if (nv.level === 0 && nv.tag !== model.tag) color = '#DFE5EB';
      //             else if (!nv.isLeaf && nv.tags[0] !== model.tag) {
      //               color = '#DFE5EB';
      //             }
      //           } else if (nv.isLeaf) {
      //             if (nu.level === 0 && nu.tag !== model.tag) color = '#DFE5EB';
      //             else if (!nu.isLeaf && nu.tags[0] !== model.tag) {
      //               color = '#DFE5EB';
      //             }
      //           }
      //           const edge = edgesMap.get(edgeId);
      //           if (edge) {
      //             edge.color = color;
      //             curShowEdges.push(edge);
      //           }
      //         });
      //       });
      //     }
      //     setTimeout(() => {
      //       graph.changeData({
      //         nodes: showNodes.concat(curShowNodes),
      //         edges: showEdges.concat(curShowEdges),
      //       });
      //       const nodeItems = graph.getNodes();
      //       const edgeItems = graph.getEdges();
      //       edgeItems.forEach((item) => {
      //         graph.clearItemStates(item);
      //       });
      //       nodeItems.forEach((item) => {
      //         graph.clearItemStates(item);
      //         graph.setItemState(item, 'appearing', true);
      //       });
      //     }, 400);
      //   }
      // });
      // graph.on('canvas:click', () => {
      //   currentFocus = undefined;
      //   const forceLayout = graph.get('layoutController').layoutMethods[0];
      //   forceLayout.forceSimulation.stop();
      //   const nodeItems = graph.getNodes();
      //   const edgeItems = graph.getEdges();
      //   if (highlighting) {
      //     highlighting = false;
      //     nodeItems.forEach((item) => {
      //       graph.setItemState(item, 'dark', false);
      //     });
      //     edgeItems.forEach((item) => {
      //       graph.setItemState(item, 'dark', false);
      //     });
      //   } else {
      //     nodeItems.forEach((item) => {
      //       const model = item.getModel();
      //       if (model.level === 0) {
      //         graph.setItemState(item, 'dark', false);
      //       } else {
      //         graph.setItemState(item, 'disappearing', true);
      //       }
      //     });
      //     edgeItems.forEach((item) => {
      //       graph.setItemState(item, 'disappearing', true);
      //     });
      //     curShowNodes = [];
      //     curShowEdges = [];
      //     setTimeout(() => {
      //       const layoutController = graph.get('layoutController');
      //       layoutController.layoutCfg.nodeStrength = 2500;
      //       layoutController.layoutCfg.collideStrength = 0.8;
      //       layoutController.layoutCfg.alphaDecay = 0.01;
      
      //       graph.changeData({
      //         nodes: showNodes,
      //         edges: showEdges,
      //       });
      //     }, 400);
      //   }
      // });

      
    },

    getData(){
      // fetch('data.json')
      //   .then((res) => res.json())
      //   .then((data) => {
          this.createData(nodes);

        // });
    },
    createData(data){
      this.nodes=[
          {
            id: '0',
            comboId: 'a',
          },
          {
            id: '1',
            comboId: 'a',
          },
          {
            id: '2',
            comboId: 'a',
          },
          {
            id: '3',
            comboId: 'a',
          },
          {
            id: '4',
            comboId: 'a',
          },
          {
            id: '5',
            comboId: 'a',
          },
          {
            id: '6',
            comboId: 'a',
          },
          {
            id: '7',
            comboId: 'a',
          },
          {
            id: '8',
            comboId: 'a',
          },
          {
            id: '9',
            comboId: 'a',
          },
          {
            id: '10',
            comboId: 'a',
          },
          {
            id: '11',
            comboId: 'a',
          },
          {
            id: '12',
            comboId: 'a',
          },
          {
            id: '13',
            comboId: 'a',
          },
          {
            id: '14',
            comboId: 'a',
          },
          {
            id: '15',
            comboId: 'a',
          },
          {
            id: '16',
            comboId: 'b',
          },
          {
            id: '17',
            comboId: 'b',
          },
          {
            id: '18',
            comboId: 'b',
          },
          {
            id: '19',
            comboId: 'b',
          },
          {
            id: '20',
          },
          {
            id: '21',
          },
          {
            id: '22',
          },
          {
            id: '23',
            comboId: 'c',
          },
          {
            id: '24',
            comboId: 'a',
          },
          {
            id: '25',
          },
          {
            id: '26',
          },
          {
            id: '27',
            comboId: 'c',
          },
          {
            id: '28',
            comboId: 'c',
          },
          {
            id: '29',
            comboId: 'c',
          },
          {
            id: '30',
            comboId: 'c',
          },
          {
            id: '31',
            comboId: 'c',
          },
          {
            id: '32',
            comboId: 'd',
          },
          {
            id: '33',
            comboId: 'd',
          },
      ];
      this.edges=[
        {
          source: 'a',
          target: 'b',
          label: 'Schema A - Schema B',
          size: 3,
          labelCfg: {
            autoRotate: true,
            style: {
              stroke: '#fff',
              lineWidth: 5,
              fontSize: 20,
            },
          },
          style: {
            stroke: 'red',
          },
        },
        {
          source: 'a',
          target: '33',
          label: 'Schema-Node',
          size: 3,
          labelCfg: {
            autoRotate: true,
            style: {
              stroke: '#fff',
              lineWidth: 5,
              fontSize: 20,
            },
          },
          style: {
            stroke: 'blue',
          },
        },
        {
          source: '0',
          target: '1',
        },
        {
          source: '0',
          target: '2',
        },
        {
          source: '0',
          target: '3',
        },
        {
          source: '0',
          target: '4',
        },
        {
          source: '0',
          target: '5',
        },
        {
          source: '0',
          target: '7',
        },
        {
          source: '0',
          target: '8',
        },
        {
          source: '0',
          target: '9',
        },
        {
          source: '0',
          target: '10',
        },
        {
          source: '0',
          target: '11',
        },
        {
          source: '0',
          target: '13',
        },
        {
          source: '0',
          target: '14',
        },
        {
          source: '0',
          target: '15',
        },
        {
          source: '0',
          target: '16',
        },
        {
          source: '2',
          target: '3',
        },
        {
          source: '4',
          target: '5',
        },
        {
          source: '4',
          target: '6',
        },
        {
          source: '5',
          target: '6',
        },
        {
          source: '7',
          target: '13',
        },
        {
          source: '8',
          target: '14',
        },
        {
          source: '9',
          target: '10',
        },
        {
          source: '10',
          target: '22',
        },
        {
          source: '10',
          target: '14',
        },
        {
          source: '10',
          target: '12',
        },
        {
          source: '10',
          target: '24',
        },
        {
          source: '10',
          target: '21',
        },
        {
          source: '10',
          target: '20',
        },
        {
          source: '11',
          target: '24',
        },
        {
          source: '11',
          target: '22',
        },
        {
          source: '11',
          target: '14',
        },
        {
          source: '12',
          target: '13',
        },
        {
          source: '16',
          target: '17',
        },
        {
          source: '16',
          target: '18',
        },
        {
          source: '16',
          target: '21',
        },
        {
          source: '16',
          target: '22',
        },
        {
          source: '17',
          target: '18',
        },
        {
          source: '17',
          target: '20',
        },
        {
          source: '18',
          target: '19',
        },
        {
          source: '19',
          target: '20',
        },
        {
          source: '19',
          target: '33',
        },
        {
          source: '19',
          target: '22',
        },
        {
          source: '19',
          target: '23',
        },
        {
          source: '20',
          target: '21',
        },
        {
          source: '21',
          target: '22',
        },
        {
          source: '22',
          target: '24',
        },
        {
          source: '22',
          target: '25',
        },
        {
          source: '22',
          target: '26',
        },
        {
          source: '22',
          target: '23',
        },
        {
          source: '22',
          target: '28',
        },
        {
          source: '22',
          target: '30',
        },
        {
          source: '22',
          target: '31',
        },
        {
          source: '22',
          target: '32',
        },
        {
          source: '22',
          target: '33',
        },
        {
          source: '23',
          target: '28',
        },
        {
          source: '23',
          target: '27',
        },
        {
          source: '23',
          target: '29',
        },
        {
          source: '23',
          target: '30',
        },
        {
          source: '23',
          target: '31',
        },
        {
          source: '23',
          target: '33',
        },
        {
          source: '32',
          target: '33',
        },
      ];
      this.combos= [
        {
          id: 'a',
          label: 'Schema A',
        },
        {
          id: 'b',
          label: 'Schema B',
        },
        {
          id: 'c',
          label: 'Schema C',
        },
        {
          id: 'd',
          label: 'Schema D',
          parentId: 'b',
        },
      ];
    },
    drawGraph(){
      this.getData();
      
      // cache the initial combo children infomation
      const comboChildrenCache = {};
      // cache the initial parent infomation
      const itemComboMap = {};
      // cache the initial node and combo info
      const itemMap = {};
      // cache the combo related edges
      const comboEdges = {};
      (this.nodes.concat(this.combos)).forEach(item => {
        const { id, comboId, parentId } = item;
        const parentComboId = comboId || parentId;
        if (parentComboId) {
          if (!comboChildrenCache[parentComboId]) comboChildrenCache[parentComboId] = [];
          comboChildrenCache[parentComboId].push(id);
          itemComboMap[id] = parentComboId;
        }
        itemMap[id] = { ...item };
      });
      const comboIds = this.combos.map(combo => combo.id);
      this.edges.forEach(edge => {
        const { source, target } = edge;
        [source, target].forEach(endId => {
          if (comboIds.includes(endId)) {
            if (!comboEdges[endId]) comboEdges[endId] = [];
            comboEdges[endId].push(edge);
          }
        })
      });

      // colorize the nodes and combos
      const subjectColors = [
        '#5F95FF', // blue
        '#61DDAA',
        '#65789B',
        '#F6BD16',
        '#7262FD',
        '#78D3F8',
        '#9661BC',
        '#F6903D',
        '#008685',
        '#F08BB4',
      ];
      const backColor = '#fff';
      const theme = 'default';
      const disableColor = '#777';
      const colorSets = G6.Util.getColorSetsBySubjectColors(
        subjectColors,
        backColor,
        theme,
        disableColor,
      );
      this.combos.forEach((combo, i) => {
        const color = colorSets[i % colorSets.length];
        combo.style = {
          stroke: color.mainStroke,
          fill: color.mainFill,
          opacity: 0.8
        }
        itemMap[combo.id].style = { ...combo.style }
      })
      this.nodes.forEach(node => {
        const comboId = itemComboMap[node.id];
        const parentCombo = itemMap[comboId];
        if (parentCombo) {
          node.style = {
            stroke: parentCombo.style.stroke,
            fill: parentCombo.style.fill
          }
        }
      })

      const contextMenu = new G6.Menu({
        itemTypes: ['combo', 'node'],
        shouldBegin: (evt) => {
          // avoid showing up context menu in some situations
          const type = evt.item.getType();
          const { id, comboId, collapsed } = evt.item.getModel();
          if (collapsed) return false;

          const hasOriComboId = Object.values(comboChildrenCache).find(childrenIds => childrenIds.includes(id));
          if (type === 'node' && (comboId || !hasOriComboId)) return false;
          return true;
        },
        getContent: (evt) => {
          const type = evt.item.getType();
          const { id, comboId, parentId, collapsed } = evt.item.getModel();
          const hasOriComboId = Object.values(comboChildrenCache).find(childrenIds => childrenIds.includes(id));

          if (type === 'combo') {
            // no context menu for collapsed combo
            if (collapsed) return ''
            // does not have parent currently but had parent at initial
            if (hasOriComboId && !parentId) return `<span id="uncombo">uncombo</span><br/><span id="re-combo">re-combo</span>`;
            // did not have parent at initail
            return `<span id="uncombo">uncombo</span>`;
          }

          // has combo currently
          if (comboId) return '';
          // does not have combo but had combo at initial
          if (hasOriComboId) return `<span id="recombo">re-combo</span>`;
          return '';
        },
        handleMenuClick: (target, item) => {
          if (target.innerHTML === 'uncombo') {
            graph.uncombo(item);
            graph.layout();
          } else {
            const id = item.getID();
            const comboId = itemComboMap[id];
            if (comboId) {
              const childrenIds = comboChildrenCache[comboId].filter(cid => !!graph.findById(cid));
              graph.createCombo({
                ...itemMap[comboId]
              }, childrenIds);
              // add the related edges back
              comboEdges[comboId].forEach(edge => {
                const { source, target } = edge;
                const otherEnd = source === comboId ? target : source;
                // add it back only when the other end of the edge exist currently
                if (graph.findById(otherEnd)) {
                  graph.addItem('edge', edge);
                }
              });
              graph.layout();
            }
          }
        },
      })

      this.graph = new G6.Graph({
        container: 'container',
        width,
        height,
        fitView: true,
        fitViewPadding: 50,
        animate: true,
        minZoom: 0.5,
        plugins: [contextMenu],
        layout: {
          type: 'comboForce',
          preventOverlap:true,
          nodeSpacing: (d) => 8,
          // type: 'comboCombined',
          // spacing: 5,
          // outerLayout: new G6.Layout['force']({
          //   linkDistance:30,
          //   preventOverlap: true,
          // }),
          // innerLayout: new G6.Layout['forceAtlas2']({
          //   kr: 3,
          //   preventOverlap: true,
          // })
        },
        defaultNode: {
          size: 30,
          style: {
            lineWidth: 2,
            fill: '#C6E5FF',
          },
        },
        defaultEdge: {
          size: 2,
          color: '#e2e2e2',
        },
        defaultCombo: {
          collapsedSubstituteIcon: {
            show: true,
            img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IEQFS5VtXX8AAAAAAAAAAABkARQnAQ',
            width: 48,
            height: 48
          }
        },
        modes: {
          default: ['drag-combo', 'drag-node', 'drag-canvas', 'zoom-canvas', 'collapse-expand-combo'],
        },
      });
      this.graph.data({
        nodes :this.nodes,
        edges:this.edges,
        combos:this.combos,
      });
      this.graph.render();
      this.G6Fun(this.graph);

      if (typeof window !== 'undefined')
        window.onresize = () => {
          if (!graph || graph.get('destroyed')) return;
          if (!container || !container.scrollWidth || !container.scrollHeight) return;
          graph.changeSize(container.scrollWidth, container.scrollHeight);
        };
    },
    
  },
  mounted() {
    const ele = document.getElementById("searchList");
    
    ele.style.height = height-80+"px";
    // Background Animation
    G6.registerNode(
      'background-animate',
      {
        afterDraw(cfg, group) {
          const r = cfg.size / 2;
          const back1 = group.addShape('circle', {
            zIndex: -3,
            attrs: {
              x: 0,
              y: 0,
              r,
              fill: cfg.color,
              opacity: 0.6,
            },
            name: 'back1-shape',
          });
          const back2 = group.addShape('circle', {
            zIndex: -2,
            attrs: {
              x: 0,
              y: 0,
              r,
              fill: cfg.color,
              opacity: 0.6,
            },
            name: 'back2-shape',
          });
          const back3 = group.addShape('circle', {
            zIndex: -1,
            attrs: {
              x: 0,
              y: 0,
              r,
              fill: cfg.color,
              opacity: 0.6,
            },
            name: 'back3-shape',
          });
          group.sort(); // Sort according to the zIndex
          back1.animate(
            {
              // Magnifying and disappearing
              r: r + 10,
              opacity: 0.1,
            },
            {
              duration: 3000,
              easing: 'easeCubic',
              delay: 0,
              repeat: true, // repeat
            },
          ); // no delay
          back2.animate(
            {
              // Magnifying and disappearing
              r: r + 10,
              opacity: 0.1,
            },
            {
              duration: 3000,
              easing: 'easeCubic',
              delay: 1000,
              repeat: true, // repeat
            },
          ); // 1s delay
          back3.animate(
            {
              // Magnifying and disappearing
              r: r + 10,
              opacity: 0.1,
            },
            {
              duration: 3000,
              easing: 'easeCubic',
              delay: 2000,
              repeat: true, // repeat
            },
          ); // 3s delay
        },
      },
      'circle',
    );
    this.drawGraph();
    
  }
}